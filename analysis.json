{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "paper-grid.js",
      "properties": [
        {
          "name": "cellHeight",
          "type": "number",
          "description": "Defines the height in pixels of the grid unit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 12
            },
            "end": {
              "line": 82,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"computeStyles\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "cellWidth",
          "type": "number",
          "description": "Defines the width in pixels of the grid unit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 12
            },
            "end": {
              "line": 92,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"computeStyles\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "cellMargin",
          "type": "number",
          "description": "Defines the margin in pixels between grid units.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 12
            },
            "end": {
              "line": 102,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"computeStyles\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "minWidth",
          "type": "number",
          "description": "Define the min with of the grid",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 12
            },
            "end": {
              "line": 111,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxWidth",
          "type": "number",
          "description": "Define the max with of the grid",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 12
            },
            "end": {
              "line": 120,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "minHeight",
          "type": "number",
          "description": "Defines min height of the grid",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 12
            },
            "end": {
              "line": 129,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxHeight",
          "type": "number",
          "description": "Defines max height of the grid",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 12
            },
            "end": {
              "line": 138,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "colCount",
          "type": "number",
          "description": "Defines the number of columns of the grid (its width in grid unit).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 12
            },
            "end": {
              "line": 148,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"computeStyles\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "10"
        },
        {
          "name": "rowCount",
          "type": "number",
          "description": "Defines the number of rows of the grid (its height in grid unit).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 12
            },
            "end": {
              "line": 158,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"computeStyles\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "10"
        },
        {
          "name": "colAutogrow",
          "type": "Boolean",
          "description": "Whether the grid columns count can increase or not (auto expand while dragging).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 12
            },
            "end": {
              "line": 167,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "rowAutogrow",
          "type": "Boolean",
          "description": "Whether the grid rows count can increase or not (auto expand while dragging).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 12
            },
            "end": {
              "line": 176,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "animated",
          "type": "boolean",
          "description": "Whether the moves and resizes are animated or not.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 12
            },
            "end": {
              "line": 186,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"computeStyles\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "draggable",
          "type": "boolean",
          "description": "Enable the drag n drop (of the grid's tiles) capability.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 12
            },
            "end": {
              "line": 196,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_upgradeEvents\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "resizable",
          "type": "boolean",
          "description": "Enable the resize (of the grid's tiles) capability.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 12
            },
            "end": {
              "line": 206,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_upgradeEvents\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "overlappable",
          "type": "boolean",
          "description": "Allow tiles to overlap each other.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 12
            },
            "end": {
              "line": 215,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "autoAdjustment",
          "type": "Boolean",
          "description": "Enable Auto Adjustment to fit the browser window",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 12
            },
            "end": {
              "line": 223,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_adjustToWindow",
          "description": "Adapt the grid to the window",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 4
            },
            "end": {
              "line": 283,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 4
            },
            "end": {
              "line": 293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_upgradeEvents",
          "description": "Handle event attachment when a mutation occurs. If call without any mutation update all current tiles/children.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 320,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toggleEvents",
          "description": "Adds and removes tracking events depending on the `resizable` and `draggable` properties.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 366,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": "Node to add/remove listener on."
            },
            {
              "name": "removed",
              "type": "Boolean",
              "description": "Whether the node has been removed or added."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "computeStyles",
          "description": "Compute the style sheet of the grid depending on its attributes/properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ensureSpace",
          "description": "Increase the grid size if the given tile is out of grid bounds.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 427,
              "column": 4
            },
            "end": {
              "line": 434,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tile",
              "type": "HTMLElement",
              "description": "Tile to fit in the grid bounds."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleMove",
          "description": "Process events related to a player being moved.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 4
            },
            "end": {
              "line": 509,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleResize",
          "description": "Process events related to a player being resized.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 4
            },
            "end": {
              "line": 618,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_safePreventDefault",
          "description": "Check the existence of the #preventDefault method before calling it.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 625,
              "column": 4
            },
            "end": {
              "line": 627,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": "the event to prevent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isOverlapping",
          "description": "Checks for overlaps with other tiles.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 638,
              "column": 4
            },
            "end": {
              "line": 657,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "col",
              "type": "Number"
            },
            {
              "name": "row",
              "type": "Number"
            },
            {
              "name": "width",
              "type": "Number"
            },
            {
              "name": "height",
              "type": "Number"
            },
            {
              "name": "exceptions",
              "defaultValue": "[]"
            }
          ],
          "return": {
            "type": "(Boolean | Element)",
            "desc": "Returns either `false` if no overlap is found or the overlapping element itself."
          }
        },
        {
          "name": "_isWithinConstraints",
          "description": "Checks if the given width or height as `value` is within grid constraints.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 667,
              "column": 4
            },
            "end": {
              "line": 669,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "in grid unit."
            },
            {
              "name": "min",
              "type": "Number",
              "defaultValue": "1",
              "description": "in grid unit."
            },
            {
              "name": "max",
              "type": "Number",
              "defaultValue": "Infinity",
              "description": "in grid unit."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true when within constraints, otherwise false."
          }
        },
        {
          "name": "getCoordinates",
          "description": "Extract the position attributes (`row`, `col`) and size attributes (`width`, `height`) of the given tile element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 677,
              "column": 4
            },
            "end": {
              "line": 684,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tile",
              "type": "HTMLElement",
              "description": "Tile to read attributes from."
            }
          ],
          "return": {
            "type": "{col: number, row: number, width: number, height: number}",
            "desc": "The position and size of the given tile as raw object."
          }
        },
        {
          "name": "getClosestPosition",
          "description": "Find the closest player position (column and row as indexes) for the given X and Y.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 696,
              "column": 4
            },
            "end": {
              "line": 720,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x",
              "type": "number",
              "description": "position in pixels on X screen axis."
            },
            {
              "name": "y",
              "type": "number",
              "description": "position in pixels on Y screen axis."
            },
            {
              "name": "rows",
              "type": "number",
              "defaultValue": "1",
              "description": "indicates the height in grid units of the player being positioned. This ensure the returned position take into account the size of the player."
            },
            {
              "name": "cols",
              "type": "number",
              "defaultValue": "1",
              "description": "indicates the width in grid units of the player being positioned. This ensure the returned position take into account the size of the player."
            },
            {
              "name": "floorHalf",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Tells whether we need to floor or ceil when the value is half (e.g. 1.5, 3.5, 12.5, ...)."
            }
          ],
          "return": {
            "type": "{col: number, row: number}",
            "desc": "The closest position as an object with a `row` and `col` properties."
          }
        },
        {
          "name": "getClosestSize",
          "description": "Find the closest player size (width and height as grid units) for the given width and height.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 743,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width",
              "type": "number",
              "description": "width in pixels."
            },
            {
              "name": "height",
              "type": "number",
              "description": "height in pixels."
            },
            {
              "name": "maxWidth",
              "type": "number",
              "defaultValue": "this.colCount",
              "description": "indicates the max width allowed for the returned size. This ensure the returned size fall into the grid by taking into account the player position."
            },
            {
              "name": "maxHeight",
              "type": "number",
              "defaultValue": "this.rowCount",
              "description": "indicates the max height allowed for the returned size. This ensure the returned size fall into the grid by taking into account the player position."
            }
          ],
          "return": {
            "type": "{width: number, height: number}",
            "desc": "The closest size as an object with a `width` and `height` properties."
          }
        },
        {
          "name": "getResizerHost",
          "description": "Find the tile element (direct children of `paper-grid`) hosting the given resizer element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 751,
              "column": 4
            },
            "end": {
              "line": 757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "resizer",
              "type": "HTMLElement",
              "description": "element used as resizer gripper."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "desc": "The tile element hosting the resizer."
          }
        },
        {
          "name": "serialize",
          "description": "Output as JSON array the current positions and sizes of all tiles.\nRepresents the serialized state of the paper grid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 765,
              "column": 4
            },
            "end": {
              "line": 776,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<{col: Number, row: Number, width: Number, height: Number}>",
            "desc": "Array of tile's coordinates (position and size) objects."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": "Demos"
        },
        {
          "url": "demo/playground.html",
          "description": "Playground"
        },
        {
          "url": "demo/responsive.html",
          "description": "Responsiveness"
        },
        {
          "url": "demo/auto-adjustment.html",
          "description": "Auto Adjustment"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 777,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "PaperGrid",
      "attributes": [
        {
          "name": "cell-height",
          "description": "Defines the height in pixels of the grid unit.",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 12
            },
            "end": {
              "line": 82,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "cell-width",
          "description": "Defines the width in pixels of the grid unit.",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 12
            },
            "end": {
              "line": 92,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "cell-margin",
          "description": "Defines the margin in pixels between grid units.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 12
            },
            "end": {
              "line": 102,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "min-width",
          "description": "Define the min with of the grid",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 12
            },
            "end": {
              "line": 111,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max-width",
          "description": "Define the max with of the grid",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 12
            },
            "end": {
              "line": 120,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "min-height",
          "description": "Defines min height of the grid",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 12
            },
            "end": {
              "line": 129,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "max-height",
          "description": "Defines max height of the grid",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 12
            },
            "end": {
              "line": 138,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "col-count",
          "description": "Defines the number of columns of the grid (its width in grid unit).",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 12
            },
            "end": {
              "line": 148,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "row-count",
          "description": "Defines the number of rows of the grid (its height in grid unit).",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 12
            },
            "end": {
              "line": 158,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "col-autogrow",
          "description": "Whether the grid columns count can increase or not (auto expand while dragging).",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 12
            },
            "end": {
              "line": 167,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "row-autogrow",
          "description": "Whether the grid rows count can increase or not (auto expand while dragging).",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 12
            },
            "end": {
              "line": 176,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "animated",
          "description": "Whether the moves and resizes are animated or not.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 12
            },
            "end": {
              "line": 186,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "draggable",
          "description": "Enable the drag n drop (of the grid's tiles) capability.",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 12
            },
            "end": {
              "line": 196,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "resizable",
          "description": "Enable the resize (of the grid's tiles) capability.",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 12
            },
            "end": {
              "line": 206,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "overlappable",
          "description": "Allow tiles to overlap each other.",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 12
            },
            "end": {
              "line": 215,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "auto-adjustment",
          "description": "Enable Auto Adjustment to fit the browser window",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 12
            },
            "end": {
              "line": 223,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "PaperGrid#move",
          "description": "`move` event when tile is dropped.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "PaperGrid#resize",
          "description": "`resize` event when resizer/gripper is dropped.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-grid"
    }
  ]
}
